import java.util.LinkedList;

// REPLACE THIS STUB WITH THE CORRECT SOLUTION.
// The current contents of this file are merely to allow things to compile 
// out of the box. It bears scant relation to a proper solution (for one thing,
// a hash table should not be a SortedStringSet.)
class ECHashStringSet implements StringSet {
	
	private static final int START_SIZE = 5;
	private static final int MAX_LOAD_FACTOR = 5;
	private static final double MIN_LOAD_FACTOR = 0.2;
	
	private int noOfEntry;
	LinkedList<String>[] buckets;
	
	@SuppressWarnings("unchecked")
	public ECHashStringSet(int noOfBuckets) {
		noOfEntry = 0;
		buckets = new LinkedList[noOfBuckets];
		for (int i = 0; i < noOfBuckets; i += 1) {
            buckets[i] = new LinkedList<String>();
        }
	}
	
	public ECHashStringSet() {
		this(START_SIZE);
	}
	
	@Override
	public void put(String s) {
		noOfEntry += 1;
		if (noOfEntry > buckets.length * MAX_LOAD_FACTOR) {
			resize();
		}
		int bucket = (s.hashCode() & 0x7fffffff) % buckets.length;
		if(!buckets[bucket].contains(s)) {
			buckets[bucket].add(s);	
		}
	}

	private void resize() {
		int newBucketSize = START_SIZE * buckets.length;
		ECHashStringSet temp = new ECHashStringSet(newBucketSize);
		for(LinkedList<String> L : buckets) {
			for(String s : L) {
				temp.put(s);
			}
		}
		buckets = temp.buckets;
	}

	@Override
	public boolean contains(String s) {
		int bucket = (s.hashCode() & 0x7fffffff) % buckets.length;
		return buckets[bucket].contains(s);
	}

}
