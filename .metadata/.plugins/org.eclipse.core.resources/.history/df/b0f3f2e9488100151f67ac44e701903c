import java.util.LinkedList;

/** Resizing array based HashSet.
  * @author Josh Hug */
public class ECHashStringSet implements StringSet {
    /** Size to start the StringSet. */
    private static final int START_SIZE = 10;
    /** Maximum ratio of item count to bucket count. */
    private static final int MAX_LOAD_FACTOR = 5;

    /** Each bucket holds all items that map to some specific hash value. */
    private LinkedList<String>[] buckets;

    /** Total number of items stored in the set. */
    private int size;

    /** Creates a StringSet with NUMBUCKETS buckets. */
    public ECHashStringSet(int numBuckets) {
        size = 0;
        buckets = (LinkedList<String>[]) new LinkedList[numBuckets];
        for (int i = 0; i < numBuckets; i += 1) {
            buckets[i] = new LinkedList<String>();
        }
    }

    /** Creates a StringSet with the default number of buckets. */
    public ECHashStringSet() {
        this(START_SIZE);
    }

    /** Adds the string S to the string set. If it is already present in the
      * set, do nothing.
      */
    public void put(String s) {
        size += 1;
        int bucketCount = buckets.length;

        if (size > bucketCount * MAX_LOAD_FACTOR) {
            int newCount = bucketCount * 5;
            resize(newCount);
        }

        int positiveHashcode = s.hashCode() & 0x7ffffff;
        int bucketNum = positiveHashcode % bucketCount;
        LinkedList<String> sl = buckets[bucketNum];
        if (!sl.contains(s)) {
            sl.add(s);
        }
    }

    /** Resizes the bucket list to NEWSIZE. */
    public void resize(int newSize) {
        int newBucketCount = size * 5;
        ECHashStringSet echss = new ECHashStringSet(newBucketCount);

        for (int i = 0; i < buckets.length; i++) {
            for (String s : buckets[i]) {
                echss.put(s);
            }
        }

        buckets = echss.buckets;
    }

    public int getNoOfBucket() {
        return buckets.length;
    }

    public int getNoOfEntry() {
        return size;
    }

    /** Returns true if S is in the string set. */
    public boolean contains(String s) {
        int bucketCount = buckets.length;
        int bucketNum = s.hashCode() % bucketCount;
        LinkedList<String> sl = buckets[bucketNum];
        return sl.contains(s);
    }
}