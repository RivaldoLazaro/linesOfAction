import java.util.LinkedList;

// REPLACE THIS STUB WITH THE CORRECT SOLUTION.
// The current contents of this file are merely to allow things to compile 
// out of the box. It bears scant relation to a proper solution (for one thing,
// a hash table should not be a SortedStringSet.)
class ECHashStringSet implements StringSet {
	
	private static final int START_SIZE = 5;
	private static final int MAX_LOAD_FACTOR = 5;
	private static final double MIN_LOAD_FACTOR = 0.2;
	
	private int noOfEntry;
	private LinkedList<String>[] buckets;
	
	@SuppressWarnings("unchecked")
    public ECHashStringSet(int numBuckets) {
        noOfEntry = 0;
        buckets = (LinkedList<String>[]) new LinkedList[numBuckets];
        for (int i = 0; i < numBuckets; i += 1) {
            buckets[i] = new LinkedList<String>();
        }
    }
	public ECHashStringSet() {
		this(START_SIZE);
	}
	
    public void put(String s) {
    	noOfEntry += 1;
        int bucketCount = buckets.length;

        if (noOfEntry > bucketCount * MAX_LOAD_FACTOR) {
            int newCount = bucketCount * 5;
            resize();
        }

        int positiveHashcode = s.hashCode() & 0x7ffffff;
        int bucketNum = positiveHashcode % bucketCount;
        LinkedList<String> sl = buckets[bucketNum];
        if (!sl.contains(s)) {
            sl.add(s);
        }
    }


    /** Resizes the bucket list to NEWSIZE. */
    public void resize() {
        int newBucketCount = noOfEntry * 5;
        ECHashStringSet echss = new ECHashStringSet(newBucketCount);

        for (int i = 0; i < buckets.length; i++) {
            for (String s : buckets[i]) {
                echss.put(s);
            }
        }

        buckets = echss.buckets;
    }

	@Override
    public boolean contains(String s) {
        int bucketCount = buckets.length;
        int bucketNum = s.hashCode() % bucketCount;
        LinkedList<String> sl = buckets[bucketNum];
        return sl.contains(s);
    }

}
